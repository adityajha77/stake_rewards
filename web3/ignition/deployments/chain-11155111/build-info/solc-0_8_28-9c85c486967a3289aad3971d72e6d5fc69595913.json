{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-9c85c486967a3289aad3971d72e6d5fc69595913",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/Staking.sol": "project/contracts/Staking.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/",
        "project/:@openzeppelin/contracts/=npm/@openzeppelin/contracts@5.4.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts@5.4.0/access/Ownable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/token/ERC20/IERC20.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.4.0) (token/ERC20/IERC20.sol)\n\npragma solidity >=0.4.16;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
      },
      "npm/@openzeppelin/contracts@5.4.0/utils/Context.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/Staking.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ncontract Staking is Ownable {\r\n    IERC20 public immutable adtToken;\r\n\r\n    struct Stake {\r\n        uint256 amount;\r\n        uint256 startTime;\r\n    }\r\n\r\n    mapping(address => Stake) public stakes;\r\n    mapping(address => uint256) public rewards;\r\n    mapping(address => uint256) public lastRewardClaimTime;\r\n\r\n    uint256 public constant REWARD_RATE_PER_SECOND = 3170979198; // Approximately 10% APR for 1,000,000 ADT (100,000 ADT per year / 31,536,000 seconds)\r\n    bool public paused;\r\n\r\n    event Staked(address indexed user, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 amount);\r\n    event RewardsClaimed(address indexed user, uint256 amount);\r\n    event RewardDeposited(address indexed owner, uint256 amount);\r\n    event Paused(address indexed owner);\r\n    event Unpaused(address indexed owner);\r\n\r\n    constructor(address _adtTokenAddress, address initialOwner) Ownable(initialOwner) {\r\n        adtToken = IERC20(_adtTokenAddress);\r\n        paused = false;\r\n    }\r\n\r\n    modifier whenNotPaused() {\r\n        require(!paused, \"Staking is paused\");\r\n        _;\r\n    }\r\n\r\n    function stake(uint256 _amount) external whenNotPaused {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        \r\n        // Calculate pending rewards before new stake\r\n        if (stakes[msg.sender].amount > 0) {\r\n            _updateReward(msg.sender);\r\n        }\r\n\r\n        adtToken.transferFrom(msg.sender, address(this), _amount);\r\n        stakes[msg.sender].amount += _amount;\r\n        stakes[msg.sender].startTime = block.timestamp;\r\n\r\n        emit Staked(msg.sender, _amount);\r\n    }\r\n\r\n    function unstake(uint256 _amount) external whenNotPaused {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        require(stakes[msg.sender].amount >= _amount, \"Insufficient staked amount\");\r\n\r\n        _updateReward(msg.sender); // Update rewards before unstaking\r\n\r\n        stakes[msg.sender].amount -= _amount;\r\n        adtToken.transfer(msg.sender, _amount);\r\n\r\n        // If user unstakes all, reset start time\r\n        if (stakes[msg.sender].amount == 0) {\r\n            stakes[msg.sender].startTime = 0;\r\n        } else {\r\n            // If partial unstake, update start time to now for remaining stake\r\n            stakes[msg.sender].startTime = block.timestamp;\r\n        }\r\n\r\n        emit Unstaked(msg.sender, _amount);\r\n    }\r\n\r\n    function claimReward() external whenNotPaused {\r\n        _updateReward(msg.sender);\r\n        uint256 rewardAmount = rewards[msg.sender];\r\n        require(rewardAmount > 0, \"No rewards to claim\");\r\n\r\n        rewards[msg.sender] = 0;\r\n        lastRewardClaimTime[msg.sender] = block.timestamp;\r\n        adtToken.transfer(msg.sender, rewardAmount);\r\n\r\n        emit RewardsClaimed(msg.sender, rewardAmount);\r\n    }\r\n\r\n    function getEarnedRewards(address _user) public view returns (uint256) {\r\n        uint256 stakedAmount = stakes[_user].amount;\r\n        if (stakedAmount == 0) {\r\n            return rewards[_user];\r\n        }\r\n\r\n        uint256 timeStaked = block.timestamp - stakes[_user].startTime;\r\n        uint256 pendingRewards = (stakedAmount * REWARD_RATE_PER_SECOND * timeStaked) / 1e18; // Assuming 18 decimals for ADT\r\n        return rewards[_user] + pendingRewards;\r\n    }\r\n\r\n    function depositRewardTokens(uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n        adtToken.transferFrom(msg.sender, address(this), _amount);\r\n        emit RewardDeposited(msg.sender, _amount);\r\n    }\r\n\r\n    function pause() external onlyOwner {\r\n        require(!paused, \"Staking is already paused\");\r\n        paused = true;\r\n        emit Paused(msg.sender);\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        require(paused, \"Staking is not paused\");\r\n        paused = false;\r\n        emit Unpaused(msg.sender);\r\n    }\r\n\r\n    function _updateReward(address _user) internal {\r\n        uint256 stakedAmount = stakes[_user].amount;\r\n        if (stakedAmount > 0) {\r\n            uint256 timeElapsed = block.timestamp - stakes[_user].startTime;\r\n            uint256 newRewards = (stakedAmount * REWARD_RATE_PER_SECOND * timeElapsed) / 1e18;\r\n            rewards[_user] += newRewards;\r\n            stakes[_user].startTime = block.timestamp; // Reset start time for reward calculation\r\n        }\r\n    }\r\n}\r\n"
      }
    }
  }
}